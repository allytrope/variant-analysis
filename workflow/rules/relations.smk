"""Contain rules for determining relatedness among individuals.
These rules will generally be used after those in `variant_calling.smk`.
"""

rule estimate_relatedness_lcmlkin:
    """Estimate relatedness between individuals using maximum likelihood."""
    input: vcf=config["lcmlkin"]["vcf"],
           founders=config["lcmlkin"]["founders"]
    output: config["results"] + "relatedness/recalibrated_joint-call.relate"
    threads: 8  # max of 8
    shell: "lcmlkin \
                -i {input.vcf} \
                -o {output} \
                -g all \
                -l phred \
                -u {input.founders} \
                -t {threads}"

rule create_plink_files:
    """Create PLINK .ped and .map files."""
    input: vcf=config["lcmlkin"]["vcf"]
    output: ped=config["results"] + "plink/{dataset}.ped",
            map=config["results"] + "plink/{dataset}.map"
    shell: "vcftools \
                --vcf {input.vcf} \
                --plink \
                --out {wildcards.dataset}"

'''
rule create_binary_plink_files:
    """Create .bed and associated PLINK files."""
    input: "resources/"
    output: expand("{results}plink/data.{ext}", results=config["results"], ext=["bed", "bim", "fam"])
    shell: "plink \
                --vcf {input} #or maybe --file \
                --make-bed"
'''

rule recode_plink_files:
    """Convert base readings from {A,C,T,G} to {1,2}."""
    input: ped=config["results"] + "plink/{dataset}.ped",
           map=config["results"] + "plink/{dataset}.map"
    output: ped=config["results"] + "plink/recode12/{dataset}_recode12.ped",
            map=config["results"] + "plink/recode12/{dataset}_recode12.map"
    shell: "plink \
                --file  " + config["results"] + " plink/{wildcards.dataset} \
                --out " + config["results"] + " plink/recode12/{wildcards.dataset}_recode12 \
                --recode12"

rule admixture:
    """Cluster samples by ancestry in an unsupervised manner."""
    input: ped=config["results"] + "plink/recode12/{dataset}_recode12.ped",
           map=config["results"] + "plink/recode12/{dataset}_recode12.map"
    output: q=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.Q",
            p=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.P",
            out=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.out"
    threads: 24
    shell: "admixture {input.ped} {wildcards.clusters} \
                -j{threads} \
                --cv | tee {output.out}; \
            mv {wildcards.dataset}_recode12.{wildcards.clusters}.Q {output.q}; \
            mv {wildcards.dataset}_recode12.{wildcards.clusters}.P {output.p}"

#------------------
#Supervised admixture

# Under development
'''
rule create_pop:
    """Create admixture .pop file."""
    output: config["results"] + "plink/{dataset}.pop"
    shell: "ls"
'''

#rule merge_vcfs:
#    """Merge .vcf of unknown ancestry and .vcf of known ancestry."""

rule supervised_admixture:
    """Cluster samples by ancestry in supervised manner.
    Requires .pop file and related PLINK files in appropriate directory as below.
    These are not generated by any rules and should have truth samples, those with known ancestries."""
    input: bed=config["results"] + "admixture/supervised/plink/{dataset}.bed",
           bim=config["results"] + "admixture/supervised/plink/{dataset}.bim",
           fam=config["results"] + "admixture/supervised/plink/{dataset}.fam",
           population=config["results"] + "admixture/supervised/plink/{dataset}.pop"
    output: q=config["results"] + "admixture/supervised/{dataset}.{clusters}.Q",
            p=config["results"] + "admixture/supervised/{dataset}.{clusters}.P",
    threads: 24
    shell: "admixture {input.bed} {wildcards.clusters} \
                --supervised \
                -j{threads} \
            mv {wildcards.dataset}.{wildcards.clusters}.Q {output.q}; \
            mv {wildcards.dataset}.{wildcards.clusters}.P {output.p}"
