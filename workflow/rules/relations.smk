"""Contain rules for determining relatedness among individuals.
These rules will generally be used after those in `variant_calling.smk`.
"""

rule estimate_relatedness_lcmlkin:
    """Estimate relatedness between individuals using maximum likelihood."""
    input: vcf=config["lcmlkin"]["vcf"],
           founders=config["lcmlkin"]["founders"]
    output: config["results"] + "relatedness/recalibrated_joint-call.relate"
    threads: 8  # max of 8
    shell: "lcmlkin \
                -i {input.vcf} \
                -o {output} \
                -g all \
                -l phred \
                -u {input.founders} \
                -t {threads}"

# --------------
# Unsupervised admixture

rule create_plink_files:
    """Create PLINK .ped and .map files."""
    input: vcf=config["lcmlkin"]["vcf"]
    output: ped=config["results"] + "plink/initial/{dataset}.ped",
            map=config["results"] + "plink/initial/{dataset}.map"
    shell: "vcftools \
                --vcf {input.vcf} \
                --plink \
                --out {wildcards.dataset}"

rule add_parent_info:
       """Add parents and sex to .ped file using pedigree generated by pedsys."""
       input: pedigree = config["plink"]["pedigree"],
              ped = config["results"] + "plink/initial/{dataset}.ped"
       output: config["results"] + "plink/{dataset}.ped"
       # `cut`s take respective columns
       # `sed` removes header
       # `paste` merges columns
       shell: "LEFT=left.tmp; \
              PEDIGREE=parents.tmp; \
              LEFT_PEDIGREE=left_pedigree.tmp; \
              cut -f 1-2 {input.ped} > $LEFT; \
              sed '1d' {input.pedigree} \
              | cut -f 1,3-5 \
              | sed 's/?[0-9]*//' > $PEDIGREE; \
              join -t '\t' $LEFT $PEDIGREE > $LEFT_PEDIGREE; \
              cut -f 6- {input.ped} \
              | paste $LEFT_PEDIGREE - > {output}; \
              rm $LEFT; \
              rm $PEDIGREE; \
              rm $LEFT_PEDIGREE"

'''
rule create_binary_plink_files:
    """Create .bed and associated PLINK files."""
    input: "resources/"
    output: expand("{results}plink/data.{ext}", results=config["results"], ext=["bed", "bim", "fam"])
    shell: "plink \
                --vcf {input} #or maybe --file \
                --make-bed"
'''

rule recode_plink_files:
    """Convert base readings from {A,C,T,G} to {1,2}."""
    input: ped=config["results"] + "plink/{dataset}.ped",
           map=config["results"] + "plink/{dataset}.map"
    output: ped=config["results"] + "plink/recode12/{dataset}_recode12.ped",
            map=config["results"] + "plink/recode12/{dataset}_recode12.map"
    shell: "plink \
                --file  " + config["results"] + " plink/{wildcards.dataset} \
                --out " + config["results"] + " plink/recode12/{wildcards.dataset}_recode12 \
                --recode12"

rule admixture:
    """Cluster samples by ancestry in an unsupervised manner."""
    input: ped=config["results"] + "plink/recode12/{dataset}_recode12.ped",
           map=config["results"] + "plink/recode12/{dataset}_recode12.map"
    output: q=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.Q",
            p=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.P",
            out=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.out"
    threads: 24
    shell: "admixture {input.ped} {wildcards.clusters} \
                -j{threads} \
                --cv | tee {output.out}; \
            mv {wildcards.dataset}_recode12.{wildcards.clusters}.Q {output.q}; \
            mv {wildcards.dataset}_recode12.{wildcards.clusters}.P {output.p}"

rule create_unsupervised_ancestry_tsv:
    """Remove added knowns from .Q and add sample IDs. This makes a more human-readable version of .Q."""
    input: ped=config["results"] + "plink/recode12/{dataset}_recode12.ped",
           q=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.Q",
    output: ancestries=config["results"] + "admixture/unsupervised/{dataset}.{clusters}.admixture.tsv"
    # `echo` adds header line
    # `sed` replaces spaces with tabs as delimiter.
    # `cut` takes first second column of .ped
    # `paste` combines the outputs of `sed` and `cut`
    # `head` removes known truth lines from end of file

    # GENERALIZE HEADER CREATION in `echo` command
    # GENERALIZE REMOVAL OF KNOWN TRUTH LINES in `head` command
    shell: "echo -e 'sample_id\tCluster_1\tCluster_2' > {output}; \
            TMP=delimited.tmp; \
            sed 's/ /\t/g' {input.q} > $TMP; \
            cut {input.ped} -d ' ' -f 2 \
            | paste - $TMP >> {output}; \
            rm $TMP;"

# ---------------
# Supervised admixture

rule supervised_admixture:
    """Cluster samples by ancestry in supervised manner.
    Requires .pop file and related PLINK files in appropriate directory as below.
    These are not generated by any rules and should have truth samples, those with known ancestries."""
    input: bed=config["results"] + "admixture/supervised/plink/{dataset}.bed",
           bim=config["results"] + "admixture/supervised/plink/{dataset}.bim",
           fam=config["results"] + "admixture/supervised/plink/{dataset}.fam",
           population=config["results"] + "admixture/supervised/plink/{dataset}.pop"
    output: q=config["results"] + "admixture/supervised/{dataset}.{clusters}.Q",
            p=config["results"] + "admixture/supervised/{dataset}.{clusters}.P",
    threads: 24
    shell: "admixture {input.bed} {wildcards.clusters} \
                --supervised \
                -j{threads} \
            mv {wildcards.dataset}.{wildcards.clusters}.Q {output.q}; \
            mv {wildcards.dataset}.{wildcards.clusters}.P {output.p}"

rule bed_to_ped:
    """Convert PLINK's binary .bed into nonbinary .ped."""
    input: bed=config["results"] + "admixture/supervised/plink/{dataset}.bed",
           bim=config["results"] + "admixture/supervised/plink/{dataset}.bim",
           fam=config["results"] + "admixture/supervised/plink/{dataset}.fam"
    output: 
           ped=config["results"] + "admixture/supervised/plink/{dataset}.ped",
           map=config["results"] + "admixture/supervised/plink/{dataset}.map"
    shell: "plink \
                --bfile " + config["results"] + "admixture/supervised/plink/{wildcards.dataset} \
                --recode \
                --out " + config["results"] + "admixture/supervised/plink/{wildcards.dataset}"

rule create_supervised_ancestry_tsv:
    """Remove added knowns from .Q and add sample IDs. This makes a more human-readable version of .Q."""
    input: ped=config["results"] + "admixture/supervised/plink/{dataset}.ped",
           q=config["results"] + "admixture/supervised/{dataset}.{clusters}.Q",
           population=config["results"] + "admixture/supervised/plink/{dataset}.pop"
    output: ancestries=config["results"] + "admixture/supervised/{dataset}.{clusters}.admixture.tsv"
    # `echo` adds header line
    # `sed` replaces spaces with tabs as delimiter.
    # `cut` takes first second column of .ped
    # `paste` combines the outputs of `sed` and `cut`
    # `head` removes known truth lines from end of file

    # GENERALIZE HEADER CREATION in `echo` command
    # GENERALIZE REMOVAL OF KNOWN TRUTH LINES in `head` command
    shell: "echo -e 'Sample_id\tIndian\tChinese' > {output}; \
            TMP=delimited.tmp; \
            TMP2=pasted.tmp; \
            sed 's/ /\t/g' {input.q} > $TMP; \
            cut {input.ped} -d ' ' -f 2 \
            | paste - $TMP >> $TMP2; \
            head -n 674 $TMP2 >> {output}; \
            rm $TMP; rm $TMP2"

# Requires some modification depending on data.
rule graph_admixture:
       """Graph ancestry of samples."""
       input: config["results"] + "admixture/supervised/{dataset}.{clusters}.admixture.tsv"
       output: config["results"] + "admixture/supervised/{dataset}.{clusters}.Q.png"
       run:
              import matplotlib.pyplot as plt
              import pandas as pd
              import seaborn as sns

              data = pd.read_table(str(input))
              sns.set_theme()
              ax = sns.histplot(data=data, bins=20, multiple="stack")
              ax.set(title="Ancestral Admixture in SNPRC Rhesus Macaques", xlabel="Ancestry ratio", xlim=(0.5, 1), ylabel="Number of individuals")
              plt.savefig(str(output))
