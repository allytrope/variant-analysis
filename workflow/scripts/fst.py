import allel
import numpy as np
import snakemake as snek

# Variables taken from Snakemake rule
vcf = snakemake.input.vcf
pickle = snakemake.output.pickle

# Taken from config file. Needs an implementation to pull from there
subpops_dict = {
    '1980-1995': ['10235', '10244', '10250', '10814', '11452', '11491', '12001', '12147', '12540', '12543', '12908', '12932', '14392', '14393', '14396', '17504', '17505', '17507', '17508', '17509', '17511', '17514', '17515', '17516', '17521', '17522', '17525', '17527', '17534', '17535', '17536', '17537', '17539', '17544', '17546', '17551', '17552', '17553', '17557', '17562', '17563', '17566', '17567', '17568', '17569', '17570', '17572', '17573', '17575', '17578', '17581', '17582', '17583', '17584', '17585', '17588', '17590', '17591', '17597', '17606', '17740', '18314', '19323', '19325', '7139', '7893', '8796', '8896', '9038', '9590', '9710', '9793', '9908'],
    '1996-2001': ['14970', '16339', '16340', '16342', '16344', '16345', '16346', '16347', '16348', '16349', '16350', '16351', '16353', '16354', '16355', '16356', '16358', '16639', '16640', '16641', '16643', '16644', '16645', '16646', '16647', '16649', '16650', '16652', '16653', '16655', '16656', '16657', '16658', '17133', '17615', '17619', '17620', '17622', '17624', '17626', '17629', '17639', '17640', '17641', '17642', '17645', '17647', '17654', '17656', '17657', '17658', '17659', '17660', '17661', '17662', '17663', '17666', '17674', '17678', '17679', '17680', '17684', '17701', '17710', '17714', '17717', '17723', '17724', '17730', '17732', '17733', '17745', '18400', '18408', '33914', '33916', '33917', '33918', '33919', '33920'],
    '2002-2005': ['17736', '17737', '18401', '18416', '18419', '18421', '18422', '18983', '18985', '18987', '18990', '18994', '19150', '19177', '19223', '19224', '19312', '19314', '19315', '19316', '19318', '19688', '19689', '19691', '19695', '19699', '19700', '19702', '19845', '19846', '19851', '19852', '19853', '19856', '19857', '20064', '20077', '20078', '20080', '20082', '20083', '26177', '26232', '26353', '26515', '26695', '26732', '26786', '26813', '26837', '26858', '26875', '26899', '26935', '26955', '26957', '26992', '27010', '27037', '27056', '27128', '27441', '29453', '29454', '29455', '29458', '29461', '29495', '29501', '33923', '33924', '33926', '33929', '33930', '33931', '33932', '33933', '33935', '33937', '33938', '33942', '33943', '33945', '33947', '33948', '33949', '33951', '33952', '34228', '34229', '34230', '34231', '34235', '34241'],
    '2006-2009': ['27646', '27682', '27783', '27886', '28035', '28060', '28066', '28071', '28092', '28109', '28110', '28138', '28144', '28168', '28189', '28195', '28196', '28210', '28215', '28240', '28282', '28302', '28303', '28310', '28324', '28356', '28403', '28794', '28796', '28829', '28898', '28927', '28935', '28937', '29141', '29362', '29364', '29372', '29429', '29436', '29437', '29445', '29507', '29532', '29555', '29560', '29576', '30003', '30009', '30019', '30024', '30034', '30086', '30118', '30122', '30125', '30128', '30139', '30142', '30204', '30285', '30618', '33959', '33960', '34243', '34244', '34245', '34246', '34247', '34249', '34250', '34252', '34254', '34256', '34257', '34258', '34259', '34260', '34261', '34264', '34265', '34266', '34270', '34271', '34272', '34273', '34274', '34276', '34277', '34280', '34281', '34282', '34283', '34284', '34285'],
    '2010-2012': ['30505', '30506', '30513', '30565', '30610', '30633', '30638', '30641', '30643', '30644', '30649', '30651', '30654', '30663', '30732', '30735', '30736', '30739', '30742', '30755', '30848', '30855', '30876', '30881', '30956', '31127', '31137', '31143', '31144', '31147', '31154', '31160', '31161', '31163', '31194', '31204', '31209', '31225', '31229', '31236', '31310', '31351', '31357', '31397', '31414', '31691', '31715', '31762', '31776', '31781', '31783', '31798', '31802', '31806', '31808', '31809', '31810', '31814', '31832', '31833', '31834', '31840', '31885', '31982', '32017', '32022', '32111', '32217', '32351', '33963', '33964', '33965', '34286', '34287', '34288', '34289', '34290', '34291', '34292', '34293', '34294', '34295', '34296', '34297', '34298', '34299'],
    '2013': ['32542', '32571', '32578', '32592', '32593', '32594', '32609', '32639', '32642', '32693', '32694', '32764', '32767', '32789', '32872', '32914', '33055', '33966', '33967', '33968', '33969', '33970', '33971', '33972', '33973', '33975', '33976', '33977', '33978', '33979', '33980', '33981', '33982', '33983', '33984', '33985', '33986', '33987', '33988', '33989', '33990', '33991', '33992', '33993', '33994', '33995', '33996', '33997', '33998', '33999', '34000', '34001', '34002', '34003', '34004', '34005', '34006', '34007', '34008', '34009', '34300', '34301', '34302', '34303', '34304', '34305', '34306', '34307', '34308', '34309', '34310', '34311', '34312', '34313', '34314', '34315', '34316', '34318', '34319', '34320', '34321', '34322'],
    '2014-2015': ['33166', '33171', '33177', '33202', '33221', '33229', '33231', '33302', '33312', '33313', '33325', '33326', '33397', '33442', '33576', '34010', '34011', '34012', '34013', '34014', '34015', '34017', '34018', '34019', '34020', '34021', '34023', '34024', '34186', '34223', '34326', '34328', '34329', '34331', '34332', '34333', '34334', '34341', '34342', '34343', '34344', '34346', '34349', '34352', '34353', '34362', '34561', '34695', '34696', '34697', '34698', '34707', '34717', '34722', '34723', '34746', '34764', '34841', '34845', '34846', '34898', '34899', '34901', '34911', '34921', '34948', '34969', '34980', '34986', '34988', '35034', '35038', '35043', '35087', '35162', '35169', '35170', '35191', '35195', '35196', '35268', '35434'],
    '2016-2017': ['35269', '35270', '35301', '35324', '35325', '35326', '35351', '35366', '35372', '35373', '35422', '35430', '35443', '35444', '35454', '35455', '35475', '35947', '35948', '35949', '35955', '35956', '35958', '35961', '35964', '35969', '35975', '36029', '36032', '36033', '36041', '36044', '36063', '36066', '36089', '36102', '36131', '36176', '36198', '36239', '36258', '36380', '36405', '36421', '36671', '36672', '36677', '36699', '36710', '36720', '36793', '36805', '36806', '36821', '36856', '36862', '36873', '36874', '36875', '36878', '36880', '36881', '36894', '36905', '36906', '36911', '36929', '36930', '36931', '36932', '36936', '36992', '36997', '37005', '37006', '37053', '37076', '37169', '37218'],
}

# # Stringify subpops (because ids later were interpreted as strings and subpops as integers)
# stringified_subpops = []
# for subpop in subpops:
#     stringified_subpops.append([str(item) for item in subpop])
# subpops = stringified_subpops

ids = list(snek.shell(f'bcftools query -l {vcf}', iterable=True))
print("ids:", ids)

# Find indicies of individuals
#subpops_by_indices = []
subpops_by_indices = {}
#print("subs:", subpops_dict)
for subpop_name, subpop_members in subpops_dict.items():
    print("subpop_name:", subpop_name, "subpop_members", subpop_members)
    indices = [ids.index(id) for id in subpop_members]
    #subpops_by_indices.append(indices)
    subpops_by_indices[subpop_name] = indices
print("subpops_by_indices:", subpops_by_indices)

# Pull genotype data from VCF.
callset = allel.read_vcf(vcf, ['variants/CHROM', 'variants/POS', 'calldata/GT'])


from itertools import combinations
from statistics import mean
import pandas as pd


# Create pandas dataframe
header = ["chrom", "center", "fst", "pop1", "pop2"]
df = pd.DataFrame(columns=header)

# Loop through populations pariwise
for pair_names, pair_indices in zip(combinations(subpops_by_indices.keys(), 2), combinations(subpops_by_indices.values(), 2)):

    # Loop through each chromosome
    for chrom in sorted(list(set(callset['variants/CHROM']))):
        chrom_sites = np.equal(callset['variants/CHROM'], chrom)

        genotypes = allel.GenotypeArray(callset['calldata/GT'][chrom_sites])
        positions = callset['variants/POS'][chrom_sites]

        # Run Fst.
        fsts, windows, counts = allel.windowed_weir_cockerham_fst(positions, genotypes, pair_indices, size=500000)

        # Set negative Fst values to 0.
        for idx, fst in enumerate(fsts):
            if fst < 0:
                fsts[idx] = 0

        # Create chromosome dataframe
        window_centers = [mean(positions) for positions in windows]
        print("Lengths:")
        print("chrom", len([chrom]*len(fsts)))
        print("center", len(window_centers))
        print("fst", len(fsts))
        print("pop1", len([pair_names[0]]*len(fsts)))
        print("pop2", len([pair_names[1]]*len(fsts)))
        data_dict = {"chrom": [chrom]*len(fsts),
                    "center": window_centers,
                    "fst": fsts,
                    "pop1": [pair_names[1]]*len(fsts),
                    "pop2": [pair_names[0]]*len(fsts)}
        chr_df=pd.DataFrame.from_dict(data_dict)
        df = pd.concat([df, chr_df])

df = df.sort_values(["chrom", "center"])

# Store data as a pickle file.
# This can then be opened into a pandas dataframe and used to make graphs with Seaborn
df.to_pickle(pickle)
