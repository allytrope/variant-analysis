import allel
import numpy as np
import pandas as pd

# Variables taken from Snakemake rule
vcf = snakemake.input.vcf
chromosome_file = snakemake.output.chromosomes
annotation_file = snakemake.output.annotations

# Reference genome Mmul_8.0.1 chromosomes
chromosomes = {"name": ["chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9",
                        "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19",
                        "chr20", "chrX"],
               "start": [1 for i in range(1, 22)],
               "stop": [225_584_828, 204_787_373, 185_818_997, 172_585_720, 190_429_646, 180_051_392, 169_600_520, 144_306_982, 129_882_849,
               92_844_088, 133_663_169, 125_506_784, 108_979_918, 127_894_412, 111_343_173, 77_216_781, 95_684_472, 70_235_451, 53_671_032,
               74_971_481, 149_150_640]}

chromosomes_df = pd.DataFrame(data=chromosomes)
chromosomes_df.to_csv(chromosome_file, header=False, index=False, sep="\t")

# Current ids don't include any individuals with missing years.
# Colony 1
subpop = ['17509', '17515', '17511', '17514', '17516', '17584', '17534', '17535', '17527', '17536', '17525', '17553', '17546', '17552', '17551', '17557', '8796', '17563', '17572', '17570', '17567', '9793', '17562', '18314', '17578', '17581', '17582', '17521', '17575', '17588', '17583', '17585', '17740', '10244', '17590', '19325', '17591', '17597', '19323', '17606', '12908',
    '17640', '17620', '17639', '17619', '17626', '17624', '17615', '17622', '17629', '16340', '16345', '16346', '16347', '16349', '16350', '16351', '16353', '16355', '16356', '16358', '16639', '16640', '16641', '16643', '16644', '16647', '16649', '16653', '16655', '16656', '16658', '16342', '16344', '16348', '16354', '17657', '16657', '16645', '16646', '16650', '16652', '17674', '17663', '17661', '17647', '17679', '17678', '17656', '17642', '17660', '17641', '14970', '17666', '17654', '17658', '17659', '17662', '17645',
    '16339', '17701', '17684', '17710', '17680', '17723', '17732', '17733', '17730', '17714', '17717', '17745', '18400', '18408', '17133', '17724', '18416', '18401', '17737', '17736', '19223', '19224', '19150', '19177', '19312', '18987', '19315', '18419', '18994', '18421', '19316', '18990', '19314', '18983', '18985', '18422', '19699', '19702', '19852', '19857', '19853', '19846', '20064', '19689', '19695', '19845', '19691', '20077', '20082', '20078', '20080', '20083', '19851', '19856', '19688', '19700', '19318',
    '29495', '29501', '26837', '26858', '26353', '26935', '27010', '26957', '29453', '29461', '29454', '29455', '29458', '26786', '26875', '26955', '26899', '27128', '27441', '26515', '27037', '26695', '26177', '26813', '26232', '27056', '26992', '26732', '28035', '28324', '28282', '28303', '28403', '28356', '28092', '28138', '28302', '28215', '27646', '28168', '28195', '28210', '27783', '28196', '27682', '28109', '28110', '28066', '28240', '28189', '28144', '28060', '28071', '28310', '27886', '28829', '28796', '28898', '28935', '29141', '28927', '28937', '28794',
    '29576', '29372', '29429', '29445', '29555', '29532', '29364', '29362', '29560', '29437', '29436', '29507', '30618', '30142', '30009', '30125', '30118', '30019', '30204', '30024', '30122', '30128', '30139', '30285', '30003', '30034', '30086', '30739', '30649', '30506', '30513', '30633', '30732', '30644', '30663', '30742', '30736', '30735', '30643', '30876', '30881', '30651', '30956', '30638', '30755', '30565', '30855', '30505', '30654', '30610', '30641', '30848', '31310', '31204', '31209', '31225', '31163', '31127', '31414', '31357', '31160', '31397', '31236', '31143', '31229', '31154', '31351', '31137', '31144', '31161', '31194', '31147',
    '31808', '31798', '31776', '31809', '31802', '31810', '31833', '32351', '31834', '32111', '31715', '31691', '31832', '32022', '32217', '31806', '31814', '31885', '31762', '31781', '31982', '32017', '31783', '31840', '32767', '32642', '32578', '32594', '32593', '32609', '32872', '32592', '32764', '32914', '32693', '32789', '32571', '32542', '33055', '32694', '32639', '33202', '33229', '33397', '33326', '33221', '33177', '33442', '33312', '33171', '33576', '33231', '33166', '33325', '33313', '33302',
    '34746', '34921', '34353', '34561', '35034', '34717', '34901', '34986', '34696', '34722', '34362', '34223', '34186', '34723', '34764', '35422', '35955', '35325', '35351', '36041', '35454', '36089', '36033', '35949', '36063', '35444', '36066', '36032', '35964', '35443', '35948', '35947', '35958', '35975', '35956', '36806', '36671', '37218', '37005', '36793', '36992', '36931', '36906', '36894', '36878', '36881', '36862', '36875', '36672', '36805', '36932'
    ]

# Colony 2
# subpop = ['33914', '33916', '33917', '33919', '33918', '33920', '33923', '33926', '33935', '33929', '33932', '33938', '33924', '33937', '33933', '33930', '33931', '33943', '34229', '34235', '34241', '34228', '33945', '34231', '34230', '33942', '33947',
#     '33952', '33951', '33949', '33948', '34257', '34245', '34246', '34252', '34256', '34243', '34244', '34249', '34247', '34250', '34254', '34273', '34272', '34274', '34266', '34271', '34261', '34260', '34265', '34258', '34270', '34264', '34259',
#     '34283', '34285', '34282', '34281', '34276', '34284', '33959', '34277', '33960', '34280', '34296', '34298', '34294', '34297', '34293', '34292', '33963', '34291', '34295', '34290', '34289', '34286', '34288', '34299', '34287', '33965', '33964',
#     '33990', '33997', '34007', '34002', '34004', '34305', '33979', '33982', '33984', '33993', '33998', '33992', '34008', '34009', '34006', '33971', '34311', '34309', '34308', '33980', '33981', '33968', '34301', '33967', '33976', '34319', '33987', '33978', '34001', '34005', '33999', '33991', '33995', '33986', '34003', '34000', '34320', '34313', '34312', '34310', '34306', '34304', '34321', '34316', '34307', '34318', '34314', '34322', '33970', '33994', '33988', '33973', '34300', '34302', '33966', '33975', '33972', '33989', '33977', '33983', '33996', '33985', '34303', '34315', '33969', '34023', '34018', '34342', '34024', '34021', '34010', '34343', '34349', '34346', '34326', '34329', '34328', '34014', '34019', '34020', '34344', '34331', '34332', '34341', '34012', '34011', '34013', '34017', '34352', '34333', '34334', '34015',
#     '35162', '35087', '35043', '34911', '35169', '34899', '34898', '35196', '35191', '35434', '35195', '35268', '35170', '34846', '35038', '34707', '34841', '34695', '34988', '34697', '34698', '34948', '34845', '34980', '34969', '36405', '35270', '35373', '35326', '35269', '35475', '36044', '36029', '35969', '35372', '35324', '36258', '36131', '35430', '36102', '36239', '35961', '36421', '35366', '36198', '36380', '35301', '35455', '36176', '36873', '36930', '36720', '36936', '36905', '36880', '36911', '37169', '36997', '36699', '36710', '36856', '36874', '36821', '37006', '37076', '36929', '36677', '37053'
#     ]


# Pull genotype data from VCF.
callset = allel.read_vcf(vcf, ['variants/CHROM', 'variants/POS', 'samples', 'calldata/GT'])

#sample_filter = np.isin(callset["samples"], subpop)
sample_subpop_indices = [list(callset["samples"]).index(id) for id in subpop]

# Create pandas dataframe for chromosome file (for chromoMap)
header = ["id", "chrom", "win_start", "win_end", "diversity"]
df = pd.DataFrame(columns=header)

# Create pandas dataframe for annotation file (for chromoMap)
header = ["id", "chrom", "win_start", "win_end", "diversity"]
df = pd.DataFrame(columns=header)

# Loop through each chromosome
for chrom in sorted(list(set(callset['variants/CHROM']))):
    chrom_filter = np.equal(callset['variants/CHROM'], chrom)

    # Take genotypes from current chromosome
    genotypes = allel.GenotypeArray(callset['calldata/GT'][chrom_filter])

    # Keep only genotypes from subpopulation
    genotypes = genotypes.take(sample_subpop_indices, axis=1)

    ac = genotypes.count_alleles()
    pos = callset["variants/POS"][chrom_filter]
    end = pos.max()

    pi, windows, n_bases, counts = allel.windowed_diversity(pos, ac, size=1_000_000, start=1, stop=end)

    data_dict = {"id": [f"chr{chrom}:{window[0]}" for window in windows],
                "chrom": [f"chr{chrom}"]*len(pi),
                "win_start": [window[0] for window in windows],
                "win_end": [window[1] for window in windows],
                "diversity": pi,
                }
    chr_df = pd.DataFrame.from_dict(data_dict)
    df = pd.concat([df, chr_df])

df = df.sort_values(["chrom", "win_start"])
df.to_csv(annotation_file, header=False, index=False, sep="\t")