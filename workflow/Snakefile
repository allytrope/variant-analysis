"""Beginning of execution for `snakemake` command and start of workflow.
To change the output produced by the command, add required files to `input` under `rule all`.
The corresponding config file for the project can be written under `configfile`."""

from collections import defaultdict
import os

configfile: "config/Mmul_10.yaml"

# Temporary variables dependent on dataset (ideally find a way to pull from config)
RHESUS_CHROMOSOMES = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "X", "Y", "MT"]
TEST_SAMPLES = [30009, 41889]

## Required variables
SAMPLE_NAMES = TEST_SAMPLES

# Create defaultdict of runs for samples.
# RUNS = defaultdict(set)
# for file in os.listdir(config["reads"]):
#     split = file.split(".")
#     RUNS[split[0]].add(split[1])

# print(RUNS)


# For command that use bash specific syntax, these have to activated. Although they may only work with the bio environment.
#shell.executable("/bin/bash")
#shell.prefix("source ~/.bash_profile; ")

wildcard_constraints:
    dataset="\w+",
    #mode="[A-Za-z0-9_]+",
    workspace="[A-Za-z0-9_\.]+",
    prefix="[A-Za-z0-9_/]+",
    path="[A-Za-z0-9_/]+",
    name="[A-Za-z0-9_\.]+",
    #directory="[A-Za-z0-9_]+",
    mode = "SNP|indel",
    filter_method = "hard_filtered|VQSR",

include: "rules/variant_calling.smk"
include: "rules/variant_recalibration.smk"
include: "rules/hard_filter.smk"
include: "rules/gene_counts.smk"
include: "rules/phasing.smk"
include: "rules/kinship.smk"
include: "rules/relations.smk"
include: "rules/coverage.smk"
include: "rules/one_off.smk"

rule all:
    """Generate target files. This rule runs automatically when Snakefile is run.
    Change the path under input to change the target files generated by snakemake.
    """
    
    input: # Input for generating README.md file
           config["results"] + "README.md",
           # User defined input goes below
           # These are two examples of how to structure desired files
           ## expand("{results}vcf/{sample}.g.vcf.gz", results=config["results"], sample=SAMPLE_NAMES)
           ## config["results"] + "db/cohort.sample_map"
           expand(config["results"] + "haplotypes/SHAPEIT4/GBS_WGS/GBS_WGS.SNP.chr{chr}.phased.vcf.gz", chr=RHESUS_CHROMOSOMES),

   
rule create_readme:
    """Create README.md file in appropriate directory for easy reference about generated directories."""
    output: config["results"] + "README.md"
    shell: """echo '''
    Information about where these files fall in the workflow can be seen under the `.smk` files under `workflow/rules`.

    The directories for variant calling from `variant_calling.smk` and `phasing.smk` are created in the following order:

    ├─ alignments  # Duplicate sequences are marked and sorted
    |   |
    |   ├─ raw  # .bam files after .fastq files aligned to reference
    |   |
    |   ├─ markdup  # .bam files after running fixing mates pairs and marking duplicate reads
    |   |
    |   └─ alignments_recalibrated  # BQSR tables applied to sequences
    |       |
    |       └─ recal_tables  # BQSR recalibration tables that are applied to sequences
    |
    ├─ gvcf  # Called variants as .g.vcf files
    |
    ├─ db  # GenomicsDB datastore consolidating .g.vcf files. Not human-readable
    |
    ├─ joint_call  # db data converted to a joint .vcf file with VQSR applied
    |
    ├─ vcf  # Multisample VCF
    |   |
    |   ├─ hard_filtered # (Option 1) Filters by hard values
    |   |   |
    |   |   ├─ filter_applied  # FILTER column filled included those variants that didn't pass
    |   |   |
    |   |   └─ pass_only  # Only variants with FILTER=PASS
    |   |
    |   └─ VQSR  # (Option 2) Variant recalibration, filters by using truth and training data
    |       |
    |       ├─ model  # Models to be applied to VCFs
    |       |
    |       ├─ filter_applied  # FILTER column filled included those variants that didn't pass
    |       |
    |       └─ pass_only  # Only variants with FILTER=PASS
    |
    ├─* plink  # Contains plink files
    |
    ├─ genotypes
    |   |
    |   ├─ posteriors  # Calculate PP tag (posterior probabilites) and recaluclate MQ tag
    |   |
    |   ├─ filtered  # Set to missing genotypes with MQ < 20
    |   |
    |   └─ subsets  # Taking subsets of samples based on sequencing methods: GBS, WES, WGS
    |
    └─ haplotypes  # Phased/imputed VCFs
        |
        ├─ scaffolds  # Preliminary VCFs of genotypes incorportating pedigree information
        |
        └─ SHAPEIT4  # Phased/imputed VCFs using scaffold and original VCF


    The directories for relations from `relations.smk` are as follows. `plink` is created first. The others do not follow an order.
    However, these require the joint vcf file from `joint_call`:

    ├─ plink  # Contains plink files
    |
    ├─ relatedness  # Pairwise estimates of relatedness between samples
    |
    ├─ admixture  # Finds rates of admixture among samples
    |   |
    |   ├─ supervised  # Uses additional samples of known origin
    |   |
    |   └─ unsupervised  # No known origins
    |
    └─ aims  # Ancestry informative markers

    Directories for determining kinship using LASAR and SEEKIN:

    └─ kinship  # Allele frequencies and pairwise relatedness

    ''' > {output}
    """

